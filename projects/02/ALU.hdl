// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zx: 入力 x をゼロにする
    Mux16(a=x, b=false, sel=zx, out=x1);
    // nx: 入力 x を反転（negate）する
    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);

    // zy: 入力 y をゼロにする
    Mux16(a=y, b=false, sel=zy, out=y1);
    // ny: 入力 y を反転（negate）する
    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);

    // f: 0 は「And 演算」、1 は「加算」に対応する
    And16(a=x2, b=y2, out=and);
    Add16(a=x2, b=y2, out=add);
    Mux16(a=and, b=add, sel=f, out=outf);

    // no: 出力 out を反転する
    Not16(in=outf, out=notoutf);
    // out1, out2 は zr 判定のため、msb（most significant bit）は ng 判定のために使う
    Mux16(a=outf, b=notoutf, sel=no, out=out, out[0..7]=out1, out[8..15]=out2, out[15]=msb);

    // zr: out=0 の場合にのみ true
    //   つまり out が 0000000000000000 の時に true になる
    // 入力が 16 あるので二分割してチェック
    Or8Way(in=out1, out=outformer);
    Or8Way(in=out2, out=outlatter);
    // 二分割したどちらとも 0 なら Not（=インバータ）で 1（=true）にする
    Or(a=outformer, b=outlatter, out=orall);
    Not(in=orall, out=zr);

    // ng: out<0 の場合にのみ true
    //   つまり最上位ビットが 1 の時に true になる（正の数の最上位ビットは 0、負の数の最上位ビットは 1 であるため）
    Or(a=msb, b=false, out=ng);
}
