// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

// address allocation(15bit)
// binary   decimal   desc
// 000...   0         RAM start
// 011...   16383     RAM end
// 100...   16384     Screen start
// 101...   24575     Screen end
// 110...   24576     Keyboard
// 24576 より大きいアドレスは無効

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // 上位 2 ビットで RAM か Screen か Keyboard のどれに読み書きするかを決める（load が 0 なら読み込み、1 なら書き込み）
    // load が 0 の場合は in に何が入ってきても関係なく、指定のアドレスから出力する
    DMux4Way(in=load, sel=address[13..14], a=loadram1, b=loadram2, c=loadscreen, d=loadkeyboard);
    Or(a=loadram1, b=loadram2, out=loadram);

    // RAM のアドレスは 14 ビットで指定する
    RAM16K(in=in, load=loadram, address=address[0..13], out=ramout);
    // Screen のアドレスは 13 ビットで指定する
    Screen(in=in, load=loadscreen, address=address[0..12], out=screenout);
    // 現在押されているキーの ascii コードを出力する
    Keyboard(out=keyboardout);

    // 上位 2 ビットで指定されたアドレスのメモリ（Screen と Keyboard のメモリマップも含む）から出力する
    Mux4Way16(a=ramout, b=ramout, c=screenout, d=keyboardout, sel=address[13..14], out=out);
}
