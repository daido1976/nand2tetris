// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 命令をデコードし、A 命令か C 命令かを判別する
    // 最上位ビットが 0 なら A 命令、1 なら C 命令
    // instruction[15]（最上位ビット）を Not（インバータ）に食わせて、出力が true なら A 命令、false なら C 命令
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    // C 命令かつ instruction[5]（d1=dest領域の最上位）が 1 なら、A レジスタに登録する
    And(a=Cinstruction, b=instruction[5], out=ALUtoA);
    // A 命令の場合は instruction がそのまま A レジスタに登録される
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregisterin);

    // A 命令、もしくは C 命令かつ A レジスタ登録命令（直上で判別してるやつ）ならば、A レジスタに登録する
    Or(a=Ainstruction, b=ALUtoA, out=loadA);
    ARegister(in=Aregisterin, load=loadA, out=Aout);

    // instruction[12]（a=comp領域の最上位）が 0 なら A ベース（A レジスタ）、1 なら M ベース（メモリ入力）の操作を ALU がする
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);

    // instruction[4]（d2=dest領域の第二位）が 1 なら、D レジスタに登録する
    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);

    ALU(
        x=Dout,
        y=AMout,
        // c1=comp領域
        zx=instruction[11],
        // c2=comp領域
        nx=instruction[10],
        // c3=comp領域
        zy=instruction[9],
        // c4=comp領域
        ny=instruction[8],
        // c5=comp領域
        f=instruction[7],
        // c6=comp領域の最下位
        no=instruction[6],
        out=ALUout,
        zr=ZRout,
        ng=NGout
        );

    // メモリ書き込みのための出力
    Or16(a=false, b=Aout, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    // instruction[3]（d3=dest領域の最下位）が 1 なら M に登録する
    And(a=Cinstruction, b=instruction[3], out=writeM);

    // instruction[2]（j1=jump領域の最上位）が 1 なら JLT
    And(a=NGout, b=instruction[2], out=jlt);
    // instruction[1]（j2=jump領域の第二位）が 1 なら JEQ
    And(a=ZRout, b=instruction[1], out=jeq);
    Or(a=ZRout, b=NGout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    // instruction[0]（j3=jump領域の最下位）が 1 なら JGT
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);
    // C 命令の時だけ jump する
    And(a=Cinstruction, b=jumpToA, out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}
